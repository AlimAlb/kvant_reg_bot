from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from aiogram.dispatcher.filters.state import State, StatesGroup
from sending_data_to_notion import createPage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from text import ABOUT, COURSES, NAME, PHONE, COURSE_CHOSE, OK, AGAIN
from utils import createcaptcha, is_name_ok, is_number_ok, is_course_ok





API_TOKEN = '5787911842:AAHu6tB6iL5RctZLSANyWocLvevavOaY6Dg'
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class UserState(StatesGroup):
    captcha = State()
    name = State()
    number = State()
    course = State()
    check_data = State()
    regi = State()

@dp.message_handler(commands=['start'])
async def start(message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    keyboard.add(button)
    await message.answer(ABOUT,  parse_mode="Markdown", reply_markup=keyboard)
    await UserState.regi.set()


#–ù–µ —Ä–∞–±–æ—Ç–∞–ª–æ —Ç–∫ message_handler —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(state=UserState.regi)
async def sendcaptcha(message,state):
    fullcaptcha = createcaptcha()
    await state.update_data(answcaptcha=fullcaptcha[1])
    await message.answer("–í–∞—à–∞ –∫–∞–ø—á–∞:\n\n" + fullcaptcha[0] + "\n\n–†–µ—à–∏—Ç–µ —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())
    await UserState.captcha.set()


@dp.message_handler(state=UserState.captcha)
async def captch(message,state):
    data = await state.get_data()
    if message.text == str(data['answcaptcha']):
        await message.answer("–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        await message.answer(NAME, reply_markup=ReplyKeyboardRemove())
        await UserState.name.set()

    else:
        #–ù–µ —É—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –Ω—É–∂–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–∞–ø—á—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—É—Ç
        await message.answer("–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        fullcaptcha = createcaptcha()
        await state.update_data(answcaptcha=fullcaptcha[1])
        await message.answer("–í–∞—à–∞ –∫–∞–ø—á–∞:\n\n" + fullcaptcha[0] + "\n\n–†–µ—à–∏—Ç–µ —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é!")
        #await UserState.regi.set()


    


@dp.message_handler(state=UserState.name)
async def get_name(message, state):
    if is_name_ok(message.text):
        await state.update_data(name=message.text)
        await state.update_data(name=message.text)
        await message.answer(PHONE)
        await UserState.number.set() 
    else:
        await message.answer('–ò–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É :( \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã —Ä–∞–∑–¥–µ–ª—å–Ω–æ:')
    


@dp.message_handler(state=UserState.number)
async def get_number(message, state):
    if is_number_ok(message.text):
        await state.update_data(number=message.text)
        rkm = ReplyKeyboardMarkup(resize_keyboard=True)
        for course in COURSES:
            rkm.add(KeyboardButton(COURSES[course]))
        await message.answer(COURSE_CHOSE, reply_markup=rkm)
        await UserState.check_data.set()
    else:
        await message.answer('–ù–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É :( \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ –≤–æ—Å—å–º–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:9XXXXXXXXX:')




@dp.message_handler(state=UserState.check_data)
async def check_data(message, state):
    if is_course_ok(message.text, COURSES):
        await state.update_data(course=message.text)
        rkm = ReplyKeyboardMarkup(resize_keyboard=True)
        rkm.add(KeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ'))
        rkm.add(KeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å'))
        data = await state.get_data()
        answ = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µüßê\n\n–ò–º—è: {data["name"]}\n–ù–æ–º–µ—Ä: +7{data["number"]}\n–ö—É—Ä—Å: {data["course"]}'
        await message.answer(answ, reply_markup=rkm)
        await UserState.course.set()
    else:
        rkm = ReplyKeyboardMarkup()
        for course in COURSES:
            rkm.add(KeyboardButton(COURSES[course]))
        await message.answer('–¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∫—É—Ä—Å–æ–≤ :(\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∏–º –∫—É—Ä—Å–æ–º.', reply_markup=rkm)
    





@dp.message_handler(state=UserState.course)
async def get_course(message, state):
    if message.text == '–í—Å–µ –≤–µ—Ä–Ω–æ':
        await message.answer(OK, reply_markup=ReplyKeyboardRemove())
        rkm = ReplyKeyboardMarkup(resize_keyboard=True)
        rkm.add(KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑'))
        await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å‚¨áÔ∏è', reply_markup=rkm)
        data = await state.get_data()
        createPage(data['name'], data['course'], data['number'])
        await state.finish()
    elif message.text == '–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å':
        await sendcaptcha(message,state)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        rkm = ReplyKeyboardMarkup(resize_keyboard=True)
        rkm.add(KeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ'))
        rkm.add(KeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å'))

@dp.message_handler()
async def get_course(message):
    #–î–æ–¥–µ–ª–∞—Ç—å –≤–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑':
        await start(message)




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
